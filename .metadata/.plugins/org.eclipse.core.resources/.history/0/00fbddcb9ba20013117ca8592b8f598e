package com.example.cs_275proj;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.temboo.Library.CloudMine.ObjectStorage.ObjectGet;
import com.temboo.Library.CloudMine.ObjectStorage.ObjectGet.ObjectGetInputSet;
import com.temboo.Library.CloudMine.ObjectStorage.ObjectGet.ObjectGetResultSet;
import com.temboo.Library.CloudMine.ObjectStorage.ObjectUpdate;
import com.temboo.Library.CloudMine.ObjectStorage.ObjectUpdate.ObjectUpdateInputSet;
import com.temboo.core.TembooException;
import com.temboo.core.TembooSession;

public class CloudmineManager {

    private String apikey = "dfc150fe989c41869778972802e70b04";
    private String appkey = "976aa71a1bfe48258fcac26c097c9789";
    private TembooSession session;
    private String LocDB;
    private String UserDB;
    private String ReviewDB;
    
    public void CloudmineManger(TembooSession s,String l,String u,String r){ 
        
         session = s;
         LocDB = l;
         UserDB = u;
         ReviewDB = r;
        
    }
    
    //Todo
    public ArrayList<String> filterGoogle(String googlePlaceList){
        
        ObjectGet objectGetChoreo = new ObjectGet(session);
        ObjectGetInputSet objectGetInputs = objectGetChoreo.newInputSet();
        objectGetInputs.set_APIKey(apikey);
        objectGetInputs.set_ApplicationIdentifier(appkey);
        objectGetInputs.set_Keys(LocDB); // get the locations database

        ObjectGetResultSet objectGetResults = objectGetChoreo.execute(objectGetInputs);
        JsonParser jp = new JsonParser();
        JsonElement root = jp.parse(objectGetResults.get_Response());
        JsonObject rootobj = root.get("success").getAsJsonObject();
        // the whole location database
        JsonArray IDarray = rootobj.get(LocDB).getAsJsonArray();
        
        ArrayList<String> placesNearby = new ArrayList<String>();
        for (int i = 0; i < IDarray.size(); i++) {
            for (int j = 0; j < googlePlaceList.size(); j++) {
                if IDarray.get("id").getAsString()[i].equals(googlePlaceList[j]) 
                          placesNearby.add(googlePlaceList[j]);
                }
            }
        }
     /*     
        HashSet<String> listToSet new HashSet<String>(placesNearby);
        List<String> placesNearbyWithoutDuplicates = new ArrayList<String>(listToSet);
     */       
        return placesNearby;
 
    }
    
    public String getRating(String locId){
        finalRating = -1;
        
        ObjectGet objectGetChoreo = new ObjectGet(session);

        ObjectGetInputSet objectGetInputs = objectGetChoreo.newInputSet();
        objectGetInputs.set_APIKey(apikey);
        objectGetInputs.set_ApplicationIdentifier(appkey);
        objectGetInputs.set_Keys(LocDB); // get the locations database
        ObjectGetResultSet objectGetResults = objectGetChoreo.execute(objectGetInputs);
 
        JsonParser jp = new JsonParser();
        JsonElement root = jp.parse(objectBetResult.get_Response());
        JsonObject rootobj = root.get("success").getAsJsonObject();
        JsonObject IDarray = rootobj.get(LocDB).getAsJsonObject();
        String id = "";
        
   /*     
        for each thing in google the google list:
             if: IDarray.has("googleId")
                   add to list
             else:
                   move on 
  */      
        for (int i = 0; i < IDarray.size(); i++) {
            if(locId.equlas(IDarray.get("id").getAsString()[i])) {
                
                id = locId;
                ObjectGetInputSet objectGetInputs = objectGetChoreo.newInputSet();
                objectGetInputs.set_APIKey(apikey);
                objectGetInputs.set_ApplicationIdentifier(appkey);
                objectGetInputs.set_Keys(ReviewDB); 
                ObjectGetResultSet objectGetResults = objectGetChoreo.execute(objectGetInputs);
        
                JsonArray reviewsForLocation = null;
                JsonParser jp = new JsonParser();
                JsonElement root = jp.parse(objectBetResult.get_Response());
                JsonObject rootobj = root.get("success").getAsJsonObject();
                JsonObject ReviewArray = rootobj.get(ReviewDB).getAsJsonObject();
                for (int j = 0; j < ReviewArray; j++) {
                        if (locId.equals(ReviewArray.get("id").getAsString())) {
                                JsonArray reviewsForLocation = ReviewArray[j].getAsJsonObject();
                                for (k = 0; k < reviewsForLocation.size(); k++) {
                                    
                                }
                        }
                }
            }
        }
        return finalRating + 1;
        
    }
    
    public String sendReview(String review,String rating,UserInfo user,String locid){
        
        JsonObject reviewObject = new JsonObject();
        
        reviewObject.add("rating", rating);
        reviewObject.addProperty("text",review);    
        reviewObject.addProperty("userid",user.getUserId());
        reviewObject.addProperty("locationid",locid);
        
        
        
        JsonObject singleReviewObject = new JsonObject();
        String reviewId = getNextReviewId();
        singleReviewOject.add(reviewId,reviewObject);
        
        JsonObject mainObject = new JsonObject();
        
        mainObject.add(ReviewDB,singleReviewObject);
        
        
        ObjectUpdate objectUpdateChoreo = new ObjectUpdate(session);
        
        ObjectUpdateInputSet objectUpdateInputs = objectUpdateChoreo.newInputSet();
        
        objectUpdateInputs.set_Data(mainObject.toString());
        objectUpdateInputs.set_APIKey(apikey);
        objectUpdateInputs.set_ApplicationIdentifier(appkey);
        
        ObjectUpdateResultSet objectUpdateResults = objectUpdateChoreo.execute(objectUpdateInputs);
       
       //TODO:
       // updateUserPoints(userid,reviewid);

        
    }
    
    private void updateUserPoints(UserInfo user,String reviewId){
    
        ObjectGet objectGetChoreo = new ObjectGet(session);

        // Get an InputSet object for the choreo
        ObjectGetInputSet objectGetInputs = objectGetChoreo.newInputSet();
        
        // Set inputs
        objectGetInputs.set_APIKey(apikey);
        objectGetInputs.set_ApplicationIdentifier(appkey);
        objectGetInputs.set_Keys("UserDB");
        
        // Execute Choreo
        ObjectGetResultSet objectGetResults = objectGetChoreo.execute(objectGetInputs);
        JsonParser jp = new JsonParser();
        JsonElement root = jp.parse(objectGetResults.get_Response());
        JsonObject rootobj = root.get("success").getAsJsonObject();
        // the whole location database
        JsonObject userArray = rootobj.get(UserDB).getAsJsonArray();
        
        
        
            
            }
            
    private String getNextReviewId(){
    
        //do something magic
        return "0";
            
            }
    
}